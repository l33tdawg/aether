flow:
  - node: FileReaderNode
  - node: StaticAnalysisNode
  - node: LLMAnalysisNode
  - node: EnhancedExploitabilityNode
  - node: HybraProtocolAnalysisNode
  - node: InvariantValidatorNode
  - node: AetherFuzzRunner
  - node: C4PoCGeneratorNode
  - node: ReportNode

tools:
  - name: slither
    type: static_analysis
    output_format: json
    enabled: true
    config:
      exclude_dependencies: false  # Need to analyze all dependencies for Hybra
      exclude_informational: false  # Include all findings for comprehensive audit
      timeout: 1200  # Increased timeout for complex protocol
      detectors: [
        # Core security detectors
        'reentrancy', 'access-control', 'arithmetic', 'locked-ether',
        # DeFi specific detectors
        'erc4626-incorrect-reflect', 'erc777-reentrancy', 'incorrect-exp',
        # Hybra-specific detectors
        'divide-before-multiply', 'unchecked-low-level-calls', 'tx-origin',
        # Vote-escrow specific
        'weak-prng', 'timestamp-dependence', 'shadowing-local',
        # Gauge and reward specific
        'constants-instead-of-literals', 'state-variable-shadowing',
        # Concentrated liquidity specific
        'uniswap-v3', 'oracle-manipulation', 'flash-loan'
      ]
      hybra_specific_checks: [
        've_balance_decay', 'gauge_weight_calculation',
        'reward_distribution_logic', 'epoch_boundary_handling',
        'liquidity_range_matching', 'bribe_accounting',
        'access_control_permissions', 'math_precision'
      ]

  - name: mythril
    type: symbolic_execution
    enabled: true
    config:
      solc_json: true
      output: json
      timeout: 1200  # Increased for complex protocol
      modules: [
        'ether_thief', 'suicide', 'state_change_external_functions',
        'exception_disorder', 'dependence_on_predictable_vars',
        # Hybra-specific modules
        'integer_overflow_underflow', 'callstack_depth_attack',
        'time_manipulation', 'number_dependency',
        # Vote-escrow specific
        'token_balance_manipulation', 'access_control_violation'
      ]
      hybra_symbolic_checks: [
        'epoch_boundary_execution', 'reward_calculation_logic',
        'gauge_weight_computation', 'voting_power_verification',
        'liquidity_range_validation', 'bribe_distribution_analysis'
      ]

  - name: llm_gpt
    type: reasoning
    enabled: true
    model: gpt-4o  # Using gpt-4o for better rate limits
    config:
      temperature: 0.1
      max_completion_tokens: 2000  # Reduced for rate limit compliance
      system_prompt: |
        You are a senior smart contract security auditor specializing in DeFi protocols. Analyze the Hybra Finance contracts for vulnerabilities.

        KEY FOCUS AREAS:
        1. CL Gauge Reward Distribution - Verify rewards match liquidity ranges
        2. ve(3,3) Epoch Cycle - Check rollover, rebase, reward allocation
        3. RewardHYBR Claiming - Examine veHYBR/HYBR/gHYBR conversions
        4. gHYBR Fund Security - Verify deposit/withdrawal/merge/split safety

        CRITICAL INVARIANTS:
        - Supply Conservation, Balance Conservation, Time Monotonicity
        - Lock Bounds, Voting Power Decay, Weight Sum Conservation
        - Emission Cap, Non-negative Claimables

        ATTACK VECTORS:
        - Range mismatch, epoch failures, asset loss, fund drainage
        - Precision errors, access bypass, checkpoint dependence

        Provide analysis with line numbers, scenarios, invariant violations, and severity.

  - name: aetherfuzz
    type: dynamic_validation
    enabled: true
    config:
      max_runs: 5000
      timeout: 900
      engine: foundry
      coverage_enabled: true
      intelligent_seeding: true
      mutation_operators: [
        'arithmetic', 'comparison', 'boolean', 'address', 'array', 'mapping'
      ]

node_configs:
  FileReaderNode:
    include_line_numbers: true
    extract_metadata: true
    analyze_imports: true

  StaticAnalysisNode:
    tools: [slither, mythril]
    severity_threshold: low
    output_format: structured
    include_raw_output: true

  LLMAnalysisNode:
    analysis_types: [
      vulnerability_detection, access_control,
      cl_gauge_analysis, ve33_epoch_analysis, reward_claiming_analysis,
      ghybr_security_analysis, invariant_validation
    ]
    confidence_threshold: 0.8
    focus_areas: [
      'cl_gauge_reward_distribution', 've33_epoch_cycle',
      'reward_claiming_process', 'ghybr_fund_security',
      'voting_power_decay', 'emission_cap_validation',
      'invariant_breaking_attacks', 'access_control_bypass'
    ]
    hybra_specific_focus: [
      'liquidity_range_reward_mismatch', 'epoch_rollover_failures',
      'uneven_reward_allocation', 'asset_loss_claiming',
      'fund_security_gHYBR', 'mathematical_precision_errors'
    ]
    batch_processing: true  # Enable batch processing for rate limit compliance
    batch_size: 3  # Process 3 contracts at a time

  EnhancedExploitabilityNode:
    validation_methods: [
      static_analysis, pattern_matching, context_analysis,
      simulation, ai_reasoning, fuzzing
    ]
    confidence_threshold: 0.7
    generate_poc: true
    include_attack_vectors: true
    include_prerequisites: true
    exploit_categories: [
      'oracle_manipulation', 'flash_loan', 'reentrancy',
      'access_control', 'arithmetic', 'governance'
    ]

  DeFiProtocolAnalysisNode:
    protocol_type: 'dex_liquidity_layer'
    analysis_focus: [
      'oracle_dependencies', 'price_manipulation',
      'liquidity_provision', 'fee_extraction',
      'cross_chain_risks', 'bridge_security'
    ]
    check_for: [
      'price_oracle_manipulation', 'flash_loan_vulnerabilities',
      'liquidity_drainage', 'governance_attacks',
      'access_control_issues', 'mathematical_errors'
    ]

  AetherFuzzRunner:
    max_runs: 5000
    timeout: 900
    seed_generation: intelligent
    coverage_tracking: true
    corpus_minimization: true
    target_contracts: 'all'
    hybra_specific_targets: [
      'GaugeManager', 'GaugeV2', 'MinterUpgradeable', 'VoterV3',
      'VotingEscrow', 'GovernanceHYBR', 'HYBR', 'RewardHYBR',
      'CLFactory', 'CLPool', 'DynamicSwapFeeModule'
    ]

  HybraProtocolAnalysisNode:
    protocol_type: 'hybra_finance'
    analysis_focus: [
      'cl_gauge_reward_distribution', 've33_epoch_cycle',
      'reward_claiming_process', 'ghybr_fund_security',
      'voting_power_decay', 'emission_cap', 'bribe_accounting'
    ]
    areas_of_concern: [
      'liquidity_range_reward_mismatch', 'epoch_rollover_failures',
      'uneven_reward_allocation', 'asset_loss_claiming',
      'fund_security_gHYBR', 'over_under_flow_math',
      'access_control_bypass', 'checkpoint_order_dependence'
    ]
    check_invariants: [
      'global_supply_conservation', 'balance_conservation',
      'time_monotonicity', 'lock_bounds', 'voting_power_decay',
      'transfer_rules', 'weight_sum_conservation',
      'epoch_boundary_consistency', 'emission_cap',
      'proportionality', 'bribe_accounting', 'non_negative_claimables',
      'monotone_accrual', 'least_privilege', 'upgrade_safety',
      'order_independence', 'context_isolation', 'no_overflow_underflow',
      'precision_rounding'
    ]

  InvariantValidatorNode:
    invariant_types: [
      'global_supply', 'balance_conservation', 'time_monotonicity',
      'lock_bounds', 'voting_power_decay', 'transfer_rules',
      'weight_conservation', 'epoch_consistency', 'emission_cap',
      'proportionality', 'bribe_accounting', 'non_negative_claimables',
      'monotone_accrual', 'least_privilege', 'upgrade_safety',
      'order_independence', 'context_isolation', 'math_bounds',
      'precision_rounding'
    ]
    validation_methods: ['static_analysis', 'symbolic_execution', 'fuzzing']
    generate_counterexamples: true

  C4PoCGeneratorNode:
    test_framework: 'foundry'
    use_provided_test_suites: true
    poc_requirements: [
      'runnable_with_test_suite', 'no_mocked_calls',
      'submission_validity_test', 'c4_poc_format'
    ]
    output_format: 'c4_compatible'
    include_exploit_details: true
    bytecode_migration_support: true

  ReportNode:
    format: markdown
    include_details: true
    output_sections: [
      summary, vulnerabilities, exploitability_analysis,
      hybra_specific_findings, invariant_validation,
      c4_poc_generation, fuzzing_results, areas_of_concern,
      recommendations
    ]
    code4rena_ready: true
    include_severity_scoring: true
    include_impact_assessment: true
    include_invariant_analysis: true
    include_bytecode_migration_notes: true
    c4_submission_format: true
