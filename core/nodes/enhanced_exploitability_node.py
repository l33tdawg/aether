#!/usr/bin/env python3
"""
Enhanced Exploitability Validation Node for AetherAudit Pipeline

Integrates the enhanced exploitability validator into the audit pipeline.
"""

from typing import Dict, Any, List
from core.flow_executor import BaseNode, NodeResult
from core.enhanced_exploitability_validator import EnhancedExploitabilityValidator, ExploitabilityLevel


class EnhancedExploitabilityNode(BaseNode):
    """Node for enhanced exploitability validation without Foundry dependency."""

    def __init__(self, name: str = "EnhancedExploitabilityNode", config: Dict[str, Any] = None):
        super().__init__(name, config or {})
        self.validator = EnhancedExploitabilityValidator()

    async def execute(self, context: Dict[str, Any]) -> NodeResult:
        """Execute enhanced exploitability validation."""
        try:
            vulnerabilities = context.get('vulnerabilities', [])
            contract_files = context.get('contract_files', [])
            
            # Also get vulnerabilities from LLM analysis results
            llm_analysis = context.get('llm_analysis_results', {})
            if isinstance(llm_analysis, dict) and 'vulnerabilities' in llm_analysis:
                vulnerabilities.extend(llm_analysis['vulnerabilities'])
                print(f"DEBUG: Added {len(llm_analysis['vulnerabilities'])} vulnerabilities from LLM analysis")
            
            if not vulnerabilities:
                return NodeResult(
                    node_name=self.name,
                    success=True,
                    data={'exploitability_results': []}
                )

            if not contract_files:
                return NodeResult(
                    node_name=self.name,
                    success=False,
                    error="No contract files found for exploitability validation"
                )

            contract_path = contract_files[0][0] if contract_files else ""
            
            print(f"üîç Running enhanced exploitability validation on {len(vulnerabilities)} vulnerabilities...")
            
            # Generate PoCs for high-severity vulnerabilities
            from core.simple_poc_generator import SimplePoCGenerator
            poc_generator = SimplePoCGenerator()
            
            high_severity_vulns = [v for v in vulnerabilities if v.get('severity', '').lower() in ['high', 'critical']]
            print(f"DEBUG: Found {len(high_severity_vulns)} high-severity vulnerabilities out of {len(vulnerabilities)} total")
            for i, vuln in enumerate(high_severity_vulns):
                print(f"DEBUG: Vuln {i+1}: {vuln.get('title', 'Unknown')} - {vuln.get('severity', 'Unknown')}")
            print(f"üéØ Generating PoCs for {len(high_severity_vulns)} high-severity vulnerabilities...")
            
            poc_results = []
            for vuln in high_severity_vulns[:3]:  # Limit to top 3 for performance
                try:
                    poc = await poc_generator.generate_poc(vuln)
                    poc_report = poc_generator.generate_report(poc)
                    poc_results.append({
                        'vulnerability': vuln,
                        'poc': poc,
                        'report': poc_report
                    })
                    print(f"‚úÖ PoC generated for {vuln.get('title', 'Unknown')}")
                except Exception as e:
                    print(f"‚ö†Ô∏è PoC generation failed for vulnerability: {e}")
            
            # Validate exploitability
            exploitability_results = await self.validator.validate_exploitability(
                contract_path, vulnerabilities
            )
            
            # Update vulnerability statuses based on exploitability results
            updated_vulnerabilities = []
            confirmed_exploits = 0
            highly_likely_exploits = 0
            possible_exploits = 0
            
            for i, vuln in enumerate(vulnerabilities):
                if i < len(exploitability_results):
                    result = exploitability_results[i]
                    
                    # Update vulnerability with exploitability information
                    updated_vuln = vuln.copy()
                    updated_vuln['exploitability_level'] = result.exploitability_level.value
                    updated_vuln['exploitability_confidence'] = result.confidence
                    updated_vuln['validation_methods'] = result.validation_methods
                    updated_vuln['attack_vector'] = result.attack_vector
                    updated_vuln['prerequisites'] = result.prerequisites
                    updated_vuln['estimated_impact'] = result.estimated_impact
                    
                    if result.poc_code:
                        updated_vuln['poc_code'] = result.poc_code
                    
                    # Count exploitability levels
                    if result.exploitability_level == ExploitabilityLevel.CONFIRMED:
                        confirmed_exploits += 1
                        updated_vuln['status'] = 'confirmed_exploitable'
                    elif result.exploitability_level == ExploitabilityLevel.HIGHLY_LIKELY:
                        highly_likely_exploits += 1
                        updated_vuln['status'] = 'highly_likely_exploitable'
                    elif result.exploitability_level == ExploitabilityLevel.POSSIBLE:
                        possible_exploits += 1
                        updated_vuln['status'] = 'possibly_exploitable'
                    else:
                        updated_vuln['status'] = 'unlikely_exploitable'
                    
                    updated_vulnerabilities.append(updated_vuln)
                else:
                    updated_vulnerabilities.append(vuln)
            
            # Update context with results
            context['vulnerabilities'] = updated_vulnerabilities
            context['exploitability_results'] = exploitability_results
            context['confirmed_exploits'] = confirmed_exploits
            context['highly_likely_exploits'] = highly_likely_exploits
            context['possible_exploits'] = possible_exploits
            
            print(f"‚úÖ Enhanced exploitability validation completed:")
            print(f"   Confirmed exploitable: {confirmed_exploits}")
            print(f"   Highly likely exploitable: {highly_likely_exploits}")
            print(f"   Possibly exploitable: {possible_exploits}")
            
            return NodeResult(
                node_name=self.name,
                success=True,
                data={
                    'exploitability_results': exploitability_results,
                    'confirmed_exploits': confirmed_exploits,
                    'highly_likely_exploits': highly_likely_exploits,
                    'possible_exploits': possible_exploits,
                    'updated_vulnerabilities': updated_vulnerabilities,
                    'poc_results': poc_results,
                    'summary': {
                        'total_vulnerabilities': len(vulnerabilities),
                        'confirmed_exploits': confirmed_exploits,
                        'highly_likely_exploits': highly_likely_exploits,
                        'possible_exploits': possible_exploits,
                        'pocs_generated': len(poc_results)
                    }
                }
            )
            
        except Exception as e:
            print(f"‚ùå Enhanced exploitability validation failed: {e}")
            return NodeResult(
                node_name=self.name,
                success=False,
                error=str(e)
            )
