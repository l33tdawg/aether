"""
Vulnerability assessment utilities for impact, exploitability, and fix suggestions.
"""

from typing import Dict, Any


class VulnerabilityAssessor:
    """Assesses vulnerabilities for impact, exploitability, and provides fix suggestions."""

    @staticmethod
    def assess_impact(vuln: Dict[str, Any]) -> str:
        """Assess the impact of a vulnerability."""
        vuln_type = vuln.get('vulnerability_type', vuln.get('category', '')).lower()
        severity = vuln.get('severity', 'medium').lower()
        swc_id = vuln.get('swc_id', '').upper()
        
        # SWC-based impact assessment
        if 'SWC-107' in swc_id or 'reentrancy' in vuln_type:
            if severity in ['critical', 'high']:
                return "Critical - Can drain all funds from contract through reentrancy attacks"
            else:
                return "High - Potential for fund drainage if exploited"
        
        elif 'SWC-105' in swc_id or 'access_control' in vuln_type:
            if severity in ['critical', 'high']:
                return "High - Unauthorized access to critical functions can lead to fund theft"
            else:
                return "Medium - Access control bypass may allow unauthorized operations"
        
        elif 'SWC-101' in swc_id or 'arithmetic' in vuln_type or 'overflow' in vuln_type:
            if severity in ['critical', 'high']:
                return "High - Integer overflow/underflow can cause incorrect calculations"
            else:
                return "Medium - Arithmetic issues may lead to unexpected behavior"
        
        elif 'SWC-104' in swc_id or 'unchecked_calls' in vuln_type:
            if severity in ['critical', 'high']:
                return "High - Unchecked external calls can lead to silent failures"
            else:
                return "Medium - Silent failures may cause inconsistent state"
        
        # Severity-based assessment
        if severity == 'critical':
            return "Critical - Can lead to complete loss of funds or contract control"
        elif severity == 'high':
            return "High - Significant security impact with potential for financial loss"
        elif severity == 'medium':
            return "Medium - Moderate security impact requiring attention"
        else:
            return "Low - Minor security concern"

    @staticmethod
    def assess_exploitability(vuln: Dict[str, Any]) -> str:
        """Assess the exploitability of a vulnerability."""
        vuln_type = vuln.get('vulnerability_type', vuln.get('category', '')).lower()
        severity = vuln.get('severity', 'medium').lower()
        confidence = vuln.get('confidence', 0.5)
        swc_id = vuln.get('swc_id', '').upper()
        
        # High confidence findings
        if confidence > 0.8:
            if 'SWC-107' in swc_id or 'reentrancy' in vuln_type:
                return "High - External call before state update allows reentrancy"
            elif 'SWC-105' in swc_id or 'access_control' in vuln_type:
                return "High - Missing or insufficient access control checks"
            elif 'SWC-101' in swc_id or 'arithmetic' in vuln_type:
                return "Medium - Requires specific input conditions to exploit"
            else:
                return "Medium - Exploitable with specific conditions"
        
        # Medium confidence findings
        elif confidence > 0.5:
            if severity in ['critical', 'high']:
                return "Medium - Requires specific conditions and attacker knowledge"
            else:
                return "Low - Limited exploitability or requires complex setup"
        
        # Low confidence findings
        else:
            return "Low - Unclear exploitability, requires further analysis"

    @staticmethod
    def generate_fix_suggestion(vuln: Dict[str, Any]) -> str:
        """Generate fix suggestions for a vulnerability."""
        vuln_type = vuln.get('vulnerability_type', vuln.get('category', '')).lower()
        swc_id = vuln.get('swc_id', '').upper()
        
        # SWC-specific fix suggestions
        if 'SWC-107' in swc_id or 'reentrancy' in vuln_type:
            return "Use Checks-Effects-Interactions pattern: update state before external calls, use reentrancy guards"
        
        elif 'SWC-105' in swc_id or 'access_control' in vuln_type:
            return "Add proper access control modifiers (onlyOwner, onlyRole) and validate permissions"
        
        elif 'SWC-101' in swc_id or 'arithmetic' in vuln_type or 'overflow' in vuln_type:
            return "Use SafeMath library or Solidity 0.8+ built-in overflow protection"
        
        elif 'SWC-104' in swc_id or 'unchecked_calls' in vuln_type:
            return "Check return values of external calls and handle failures appropriately"
        
        # Generic fix suggestions
        elif 'oracle' in vuln_type:
            return "Implement proper oracle validation, use multiple price feeds, add circuit breakers"
        
        elif 'governance' in vuln_type:
            return "Implement timelock delays, multi-signature requirements, and proposal validation"
        
        else:
            return "Review and implement appropriate security measures based on vulnerability type"
